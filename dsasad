class Solution2 {
public:
	vector<int> getRow(int rowIndex) {
		int *n = new int[(rowIndex + 2)*(rowIndex + 1) / 2];
		for (int i = 0; i <= rowIndex; ++i)
			for (int j = 0; j < i / 2 + 1; ++j) {
				if (j == 0)
					n[i*(i + 1) / 2 + j] = 1;
				else
				{
					if (i % 2 == 0 && j == i / 2)
						n[i*(i + 1) / 2 + j] = n[i*(i - 1) / 2 + j - 1] * 2;
					else
						n[i*(i + 1) / 2 + j] = n[i*(i - 1) / 2 + j - 1] + n[i*(i - 1) / 2 + j];

				}
			}
		vector<int> v;
		for (int i = rowIndex*(rowIndex + 1) / 2, j = rowIndex / 2; j >= 0; --j, ++i)
			v.push_back(n[i]);
		for(int i= (rowIndex + 1)/2;i>0;i--)
			v.push_back(n[i-1]);

		delete n;
		return v;

	}
};


int main()
{
	/*vector<int> v = { 1,0,2,1 };
	Solution s;
	cout<<boolalpha<<s.containsNearbyDuplicate(v, 3)<<endl;*/
	Solution2 s;
	vector<int> v = s.getRow(6);
	for (auto& i : v)
		cout << i << " ";
	cout << endl;
    return 0;
}
